name: deployment
on:
    issue_comment:

env:
    MAGIC_COMMENT: "/deploy" # this is a parameter you can change

permissions:
    contents: read
    issues: write
    pull-requests: write
    deployments: write

jobs:
    integration:
        name: Continuous Integration
        runs-on: ubuntu-latest
        steps:
          - name: Checkout Code
            uses: actions/checkout@v3
            with:
                ref: dev
    
          - name: Lint code
            run: echo "Linting repository"
    
          - name: Run unit tests
            run: echo "Running unit tests"

    build-and-push-ecr-image:
        if: (github.event.issue.pull_request != null) && (github.event.comment.body == '/deploy')
        name: Continuous Delivery
        needs: integration
        runs-on: ubuntu-latest
        steps:
            -   name: Checkout Code
                uses: actions/checkout@v3
                with:
                    ref: dev
    
            -   name: Install Utilities
                run: |
                    pip install -r requirements.txt
                    sudo apt-get update
                    sudo apt-get install -y jq unzip
                    python src/model_deployment.py
                env:
                    ENTITY: 'himasha'
                    PROJECT: 'mnist-experiment'
                    REGISTRY: 'mnist-registry'
                    TAG: 'production-candidate'
                    WANDB_API_KEY: ${{secrets.WANDB_API_KEY}}

            -   name: Configure AWS credentials
                uses: aws-actions/configure-aws-credentials@v1
                with:
                    aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                    aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                    aws-region: ${{ secrets.AWS_REGION }}

            -   name: Login to Amazon ECR
                id: login-ecr
                uses: aws-actions/amazon-ecr-login@v1
    
            -   name: Build, tag, and push image to Amazon ECR
                id: build-image
                env:
                    ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                    ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
                    IMAGE_TAG: latest
                run: |
                    # Build a docker container and
                    # push it to ECR so that it can
                    # be deployed to ECS.
                    docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
                    docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
                    echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    Continuous-Deployment:
        name: AWS Deployment
        needs: build-and-push-ecr-image
        runs-on: self-hosted
        steps:
            -   name: Checkout
                uses: actions/checkout@v3
                with:
                    ref: dev

            -   name: Configure AWS credentials
                uses: aws-actions/configure-aws-credentials@v1
                with:
                    aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                    aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                    aws-region: ${{ secrets.AWS_REGION }}

            -   name: Login to Amazon ECR
                id: login-ecr
                uses: aws-actions/amazon-ecr-login@v1

            -   name: Pull latest images
                run: |
                    docker pull ${{secrets.AWS_ECR_LOGIN_URI}}/${{ secrets.ECR_REPOSITORY_NAME }}:latest
                
                # - name: Stop and remove  container if running
                #   run: |
                #    docker ps -q --filter "name=mltest" | grep -q . && docker stop mltest && docker rm -fv mltest
            
            -   name: Run Docker Image to serve users
                run: |
                    docker run -d -p 8080:8080 --ipc="host" --name=mltest -e 'AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}' -e 'AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}' -e 'AWS_REGION=${{ secrets.AWS_REGION }}'  ${{secrets.AWS_ECR_LOGIN_URI}}/${{ secrets.ECR_REPOSITORY_NAME }}:latest
            -   name: Clean previous images and containers
                run: |
                    docker system prune -f